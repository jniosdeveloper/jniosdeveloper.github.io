<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2022/08/06/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/08/06/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章<br><img src="test.jpg" alt="图片引用方法二"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo个人网站搭建</title>
    <link href="/2021/04/06/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/04/06/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1. 安装Hexo"></a>1. 安装Hexo</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li>Git</li></ul><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>Mac：使用 Homebrew, MacPorts 或者下载 安装程序。</p><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>Node.js 为大多数平台提供了官方的安装程序。对于中国大陆地区用户，可以前往淘 Node.js 镜像下载。</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> hexo init &lt;folder&gt;<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> &lt;folder&gt;<br><span class="hljs-variable">$</span> npm install<br></code></pre></td></tr></table></figure><p>执行成功后，再执行下面两条命令</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo g<br>hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>在浏览器输入localhost:4000查看是否已生成博客。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>您可以在 _config.yml 中修改大部分的配置。</p><table><thead><tr><th>title</th><th>网站标题</th></tr></thead><tbody><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>keywords</td><td>网站的关键词。支援多个关键词。</td></tr><tr><td>author</td><td>您的名字</td></tr><tr><td>language</td><td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td></tr><tr><td>timezone</td><td>网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">$ hexo <span class="hljs-keyword">init</span> [folder]<br></code></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure><p>生成静态文件。</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></p><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo deploy<br></code></pre></td></tr></table></figure><p>部署网站。</p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo clean<br></code></pre></td></tr></table></figure><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><hr><h2 id="2-GitHub创建个人仓库"><a href="#2-GitHub创建个人仓库" class="headerlink" title="2. GitHub创建个人仓库"></a>2. GitHub创建个人仓库</h2><p>在GitHub创建一个和你用户名相同的仓库，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。</p><hr><h2 id="3-将hexo部署到GitHub"><a href="#3-将hexo部署到GitHub" class="headerlink" title="3. 将hexo部署到GitHub"></a>3. 将hexo部署到GitHub</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为YourgithubName就是你的GitHub账户</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol">repo:</span> https:<span class="hljs-comment">//github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="hljs-symbol">branch:</span> master<br></code></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后分别执行下面命令</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean<br>hexo <span class="hljs-keyword">generate</span><br>hexo deploy<br></code></pre></td></tr></table></figure><p>其中 hexo clean清除了你之前生成的JS等文件，也可以不加。<br>hexo generate 顾名思义，生成静态文件，包括JS、CSS等，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写<br>此时，如果你的元旦仓库如果有了文件提交，则表示你的hexo已经部署到远端，可以访问<br><a href="http://yourname.github.io/">http://yourname.github.io</a> 进行查看。</p><hr><h2 id="4-Hexo主题设置"><a href="#4-Hexo主题设置" class="headerlink" title="4. Hexo主题设置"></a>4. Hexo主题设置</h2><p>Hexo可以配置多种主题，我们这里以Next为例。<br>cd到Hexo根文件目录，执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/theme-next/</span>hexo-theme-<span class="hljs-keyword">next</span> themes/<span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>修改站点配置文件_config.yml，找到如下代码：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: landscape<br></code></pre></td></tr></table></figure><p>将 landscape 修改为 next 即可。</p><hr><h2 id="5-配置过程中的相关问题"><a href="#5-配置过程中的相关问题" class="headerlink" title="5. 配置过程中的相关问题"></a>5. 配置过程中的相关问题</h2><ol><li>hexonext主题侧边栏日志出现问题<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">next主题目录下</span><br><br><span class="xml">/layout/_macro/sidebar.swig文件中找到</span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">theme.menu.archives</span>).split(<span class="hljs-name">&#x27;||&#x27;</span>)[0] | trim &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span> 原因是url_for函数将||转码了，</span><br><br><span class="xml">改成<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for</span>(<span class="hljs-name">theme.menu.archives.split</span>(<span class="hljs-name">&#x27;||&#x27;</span>)[0])| trim&#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>即可</span><br></code></pre></td></tr></table></figure></li><li>localhost:4000报错误<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i hexo-renderer-swig<br></code></pre></td></tr></table></figure>原因是hexo在5.0之后把swig给删除了需要自己手动安装。</li><li>解决hexo换next主题当出现首页和标签的时候，点进去为cannot GET /20%/<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino">在 next 的 _config.yml 文件里的第 <span class="hljs-number">95</span> 行<br><span class="hljs-number">94</span>:menu:<br><span class="hljs-number">95</span>: home: / || home<br>改为：<br><span class="hljs-number">95</span>: home: /|| home<br></code></pre></td></tr></table></figure></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://hexo.io/zh-cn/docs/commands">Hexo官网</a></li><li><a href="https://www.jianshu.com/p/9f0e90cc32c2">Hexo-NexT配置超炫网页效果</a></li><li><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础语法</title>
    <link href="/2021/04/06/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/04/06/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Eclipse的相关配置"><a href="#1-Eclipse的相关配置" class="headerlink" title="1. Eclipse的相关配置"></a>1. Eclipse的相关配置</h2><p>配置编码格式为UTF-8。</p><h2 id="2-Java-SE、Java-EE、Java-ME的区别"><a href="#2-Java-SE、Java-EE、Java-ME的区别" class="headerlink" title="2. Java SE、Java EE、Java ME的区别"></a>2. Java SE、Java EE、Java ME的区别</h2><p>Java SE是Java EE 和Java ME的编程基础，可以开发一些桌面应用。</p><p>Java ME应用于移动设备和嵌入式设备。</p><p>Java EE主要用于企业应用。这是目前市场的主流需求，相当于我们常规理解的Java后台开发。</p><h2 id="3-开发环境搭建，什么是JDK和JRE"><a href="#3-开发环境搭建，什么是JDK和JRE" class="headerlink" title="3. 开发环境搭建，什么是JDK和JRE"></a>3. 开发环境搭建，什么是JDK和JRE</h2><p>JDK，Java开发工具包，提供Java开发中用到的各种工具。</p><p>JRE，Java运行环境。将开发的Java运行到计算机上。</p><p>JDK包含了JRE。</p><h2 id="4-标识符的命名规则"><a href="#4-标识符的命名规则" class="headerlink" title="4. 标识符的命名规则"></a>4. 标识符的命名规则</h2><p>标识符可以由字母、数字、下划线(_)和美元符($)组成,不能以数字开头。</p><p>标识符严格区分大小写。</p><p>标识符不能是Java关键字和保留字。</p><p>标识符的命名最好能反映出其作用。</p><h2 id="5-浮点型字面值"><a href="#5-浮点型字面值" class="headerlink" title="5. 浮点型字面值"></a>5. 浮点型字面值</h2><p>浮点型字面值默认情况下表示double类型,也可以在值后加d或D</p><p>如: 123.43d或123.43D</p><p>如表示float类型,则需要在字面值后加f或F</p><p>如: 23.4f或23.4F</p><h2 id="6-字符串"><a href="#6-字符串" class="headerlink" title="6. 字符串"></a>6. 字符串</h2><p>在Java中字符串属于对象，Java提供了String类来创建和操作字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">String greeting &#x3D; &quot;Hello world!&quot;;<br></code></pre></td></tr></table></figure><p>注意:String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了。 如果需要对字符串做很多修改，那么应该选择使用StringBuffer&amp;StringBuilder类。</p><h2 id="7-StringBuffer-和-StringBuilder-类"><a href="#7-StringBuffer-和-StringBuilder-类" class="headerlink" title="7. StringBuffer 和 StringBuilder 类"></a>7. StringBuffer 和 StringBuilder 类</h2><p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（线程安全就是多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染。线程不安全就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的数据是脏数据）。</p><p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">StringBuffer sBuffer &#x3D; new StringBuffer(&quot; test&quot;);<br>sBuffer.append(&quot; String Buffer&quot;);<br>System.out.println(sBuffer);  <br></code></pre></td></tr></table></figure><h2 id="8-Java-数组"><a href="#8-Java-数组" class="headerlink" title="8. Java 数组"></a>8. Java 数组</h2><h3 id="声明数组变量"><a href="#声明数组变量" class="headerlink" title="声明数组变量"></a>声明数组变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">dataType[] arrayRefVar;   &#x2F;&#x2F; 首选的方法<br>或<br>dataType arrayRefVar[];  &#x2F;&#x2F; 效果相同，但不是首选方法<br></code></pre></td></tr></table></figure><p>注意: 建议使用 dataType[] arrayRefVar 的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C/C++ 语言 ，在Java中采用是为了让  C/C++  程序员能够快速理解 java 语言。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面是这两种语法的代码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">double[] myList;         &#x2F;&#x2F; 首选的方法<br>或<br>double myList[];         &#x2F;&#x2F;  效果相同，但不是首选方法<br></code></pre></td></tr></table></figure><h2 id="9-Java-方法"><a href="#9-Java-方法" class="headerlink" title="9.Java 方法"></a>9.Java 方法</h2><p>我们经常使用到System.out.println()，那么它是什么呢？</p><p>println()是一个方法(Method)，而System是系统类(Class)，out是标准输出对象(Object)。这句话的用法是调用系统类System中的标准输出对象out中的方法println()。</p><h3 id="那么什么是方法呢？"><a href="#那么什么是方法呢？" class="headerlink" title="那么什么是方法呢？"></a>那么什么是方法呢？</h3><p>Java方法是语句的集合，它们在一起执行一个功能。</p><p>方法是解决一类问题的步骤的有序组合。</p><p>方法包含于类或对象中。</p><p>方法在程序中被创建，在其他地方被引用。</p><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><p>一般情况下，定义一个方法包含以下语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">修饰符 返回值类型 方法名 (参数类型 参数名)&#123;<br>    ...<br>    方法体<br>    ...<br>    return 返回值;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>局部变量，int n = 100如何在内存中存储？</li><li>char ch = 65，为什么整形还能给字符类型char赋值？</li><li>什么是ASC2编码，什么是unicode编码？</li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
